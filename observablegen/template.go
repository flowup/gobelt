// DO NOT TOUCH THIS FILE
// This file is auto generated by gobelt utility
// it should be ignored by the version control and
// generated only if necessary
package observablegen

// __T__SubscriberFunc is a callback function
// for the subscriber to the __T__ collection
type __T__SubscriberFunc func(val []*__T__)

// __T__Observable is an observable for the __T__Subject
type __T__Observable struct {
  subscribers []*__T__Subscriber
}

// Subscribe will add the subscriber into the observable
func (o *__T__Observable) Subscribe(callback __T__SubscriberFunc) {
  o.subscribers = append(o.subscribers, &__T__Subscriber{callback})
}

// __T__Subscriber is an object that subscribes to the
// changes of __T__Subject.
type __T__Subscriber struct {
  callback __T__SubscriberFunc
}

// Next pushes the value to the subscriber
func (s *__T__Subscriber) Next(val []*__T__) {
  s.callback(val)
}

// __T__Subject is an entry point for changes of __T__
type __T__Subject struct {
  observable *__T__Observable
}

// New__T__Subject returns a new Subject object for the
// __T__.
func New__T__Subject() *__T__Subject {
  return &__T__Subject{&__T__Observable{nil}}
}

// AsObservable returns the observable object of the __T__Subject
func (s *__T__Subject) AsObservable() *__T__Observable {
  return s.observable
}

// Next will push the given value to all subscribers of the
// underlying observable
func (s *__T__Subject) Next(val []*__T__) {
  for _, sub := range s.observable.subscribers {
    sub.Next(val)
  }
}


